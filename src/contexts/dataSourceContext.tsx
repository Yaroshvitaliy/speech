// Generated by cra-context-generator@1.3.0 on Sun, 24 Jul 2022 09:04:14 GMT.
// Do not edit this file manually unless you disabled its code generation.
import React from 'react';

/**
 * The DataSource state props interface.
 */
export interface IDataSourceStateProps {
    rawData: string;
    isValid: boolean;
    error: string;
    foreignLanguageVoiceName: string;
    nativeLanguageVoiceName: string;
    cards: any[];
}

/**
 * The DataSource state interface.
 */
export interface IDataSourceState {
    rawDataState: string;
    setRawDataState?: React.Dispatch<React.SetStateAction<string>>;
    isValidState: boolean;
    setIsValidState?: React.Dispatch<React.SetStateAction<boolean>>;
    errorState: string;
    setErrorState?: React.Dispatch<React.SetStateAction<string>>;
    foreignLanguageVoiceNameState: string;
    setForeignLanguageVoiceNameState?: React.Dispatch<React.SetStateAction<string>>;
    nativeLanguageVoiceNameState: string;
    setNativeLanguageVoiceNameState?: React.Dispatch<React.SetStateAction<string>>;
    cardsState: any[];
    setCardsState?: React.Dispatch<React.SetStateAction<any[]>>;
}

/**
 * The DataSource context provider props interface.
 */
export interface IDataSourceContextProviderProps {
    children: React.ReactNode;
    dataSourceState: IDataSourceState;
    rawDataSetEventHandler?: (rawData: string) => void;
    isValidSetEventHandler?: (isValid: boolean) => void;
    errorSetEventHandler?: (error: string) => void;
    foreignLanguageVoiceNameSetEventHandler?: (foreignLanguageVoiceName: string) => void;
    nativeLanguageVoiceNameSetEventHandler?: (nativeLanguageVoiceName: string) => void;
    cardsSetEventHandler?: (cards: any[]) => void;
}

/**
 * The DataSource context value interface.
 */
export interface IDataSourceContextValue {
    rawData: string;
    setRawData: (rawData: string) => void;
    isValid: boolean;
    setIsValid: (isValid: boolean) => void;
    error: string;
    setError: (error: string) => void;
    foreignLanguageVoiceName: string;
    setForeignLanguageVoiceName: (foreignLanguageVoiceName: string) => void;
    nativeLanguageVoiceName: string;
    setNativeLanguageVoiceName: (nativeLanguageVoiceName: string) => void;
    cards: any[];
    setCards: (cards: any[]) => void;
}

export const DefaultRawData = '{}';
export const DefaultIsValid = true;
export const DefaultError = '';
export const DefaultForeignLanguageVoiceName = '';
export const DefaultNativeLanguageVoiceName = '';
export const DefaultCards = [];

/**
 * The default DataSource state.
 */
export const DefaultDataSourceState: IDataSourceState = {
    rawDataState: DefaultRawData,
    setRawDataState: undefined,
    isValidState: DefaultIsValid,
    setIsValidState: undefined,
    errorState: DefaultError,
    setErrorState: undefined,
    foreignLanguageVoiceNameState: DefaultForeignLanguageVoiceName,
    setForeignLanguageVoiceNameState: undefined,
    nativeLanguageVoiceNameState: DefaultNativeLanguageVoiceName,
    setNativeLanguageVoiceNameState: undefined,
    cardsState: DefaultCards,
    setCardsState: undefined,
};

/**
 * The default DataSource context value.
 */
export const DefaultDataSourceContextValue: IDataSourceContextValue = {
    rawData: DefaultRawData,
    setRawData: (rawData: string) => {},
    isValid: DefaultIsValid,
    setIsValid: (isValid: boolean) => {},
    error: DefaultError,
    setError: (error: string) => {},
    foreignLanguageVoiceName: DefaultForeignLanguageVoiceName,
    setForeignLanguageVoiceName: (foreignLanguageVoiceName: string) => {},
    nativeLanguageVoiceName: DefaultNativeLanguageVoiceName,
    setNativeLanguageVoiceName: (nativeLanguageVoiceName: string) => {},
    cards: DefaultCards,
    setCards: (cards: any[]) => {},
};

/**
 * The DataSource state.
 */
export const DataSourceState = ({
            rawData,
            isValid,
            error,
            foreignLanguageVoiceName,
            nativeLanguageVoiceName,
            cards,
        }: IDataSourceStateProps) => {

    const [ rawDataState, setRawDataState ] = React.useState<string>(rawData || DefaultRawData);
    const [ isValidState, setIsValidState ] = React.useState<boolean>(isValid || DefaultIsValid);
    const [ errorState, setErrorState ] = React.useState<string>(error || DefaultError);
    const [ foreignLanguageVoiceNameState, setForeignLanguageVoiceNameState ] = React.useState<string>(foreignLanguageVoiceName || DefaultForeignLanguageVoiceName);
    const [ nativeLanguageVoiceNameState, setNativeLanguageVoiceNameState ] = React.useState<string>(nativeLanguageVoiceName || DefaultNativeLanguageVoiceName);
    const [ cardsState, setCardsState ] = React.useState<any[]>(cards || DefaultCards);

    const dataSourceState: IDataSourceState = {
        rawDataState,
        setRawDataState,
        isValidState,
        setIsValidState,
        errorState,
        setErrorState,
        foreignLanguageVoiceNameState,
        setForeignLanguageVoiceNameState,
        nativeLanguageVoiceNameState,
        setNativeLanguageVoiceNameState,
        cardsState,
        setCardsState,
    };

    return dataSourceState;
};

/**
 * The DataSource context.
 * The DefaultDataSourceContextValue argument is only used when a component does not have a matching Provider above it in the tree.
 * This can be helpful for testing components.
 */
export const DataSourceContext = React.createContext<IDataSourceContextValue>(DefaultDataSourceContextValue);

/**
 * The DataSource context provider.
 */
export const DataSourceContextProvider = ({
            children,
            dataSourceState,
            rawDataSetEventHandler,
            isValidSetEventHandler,
            errorSetEventHandler,
            foreignLanguageVoiceNameSetEventHandler,
            nativeLanguageVoiceNameSetEventHandler,
            cardsSetEventHandler,
        }: IDataSourceContextProviderProps) => {

    const {
        rawDataState,
        setRawDataState,
        isValidState,
        setIsValidState,
        errorState,
        setErrorState,
        foreignLanguageVoiceNameState,
        setForeignLanguageVoiceNameState,
        nativeLanguageVoiceNameState,
        setNativeLanguageVoiceNameState,
        cardsState,
        setCardsState,
    } = dataSourceState || {};

    React.useEffect(() => {
        rawDataSetEventHandler && rawDataSetEventHandler(rawDataState);
    }, [ rawDataState, setRawDataState, rawDataSetEventHandler ]);

    React.useEffect(() => {
        isValidSetEventHandler && isValidSetEventHandler(isValidState);
    }, [ isValidState, setIsValidState, isValidSetEventHandler ]);

    React.useEffect(() => {
        errorSetEventHandler && errorSetEventHandler(errorState);
    }, [ errorState, setErrorState, errorSetEventHandler ]);

    React.useEffect(() => {
        foreignLanguageVoiceNameSetEventHandler && foreignLanguageVoiceNameSetEventHandler(foreignLanguageVoiceNameState);
    }, [ foreignLanguageVoiceNameState, setForeignLanguageVoiceNameState, foreignLanguageVoiceNameSetEventHandler ]);

    React.useEffect(() => {
        nativeLanguageVoiceNameSetEventHandler && nativeLanguageVoiceNameSetEventHandler(nativeLanguageVoiceNameState);
    }, [ nativeLanguageVoiceNameState, setNativeLanguageVoiceNameState, nativeLanguageVoiceNameSetEventHandler ]);

    React.useEffect(() => {
        cardsSetEventHandler && cardsSetEventHandler(cardsState);
    }, [ cardsState, setCardsState, cardsSetEventHandler ]);

    const contextValue: IDataSourceContextValue = {
        rawData: rawDataState,
        setRawData: (rawData: string) => setRawDataState && setRawDataState(rawData),
        isValid: isValidState,
        setIsValid: (isValid: boolean) => setIsValidState && setIsValidState(isValid),
        error: errorState,
        setError: (error: string) => setErrorState && setErrorState(error),
        foreignLanguageVoiceName: foreignLanguageVoiceNameState,
        setForeignLanguageVoiceName: (foreignLanguageVoiceName: string) => setForeignLanguageVoiceNameState && setForeignLanguageVoiceNameState(foreignLanguageVoiceName),
        nativeLanguageVoiceName: nativeLanguageVoiceNameState,
        setNativeLanguageVoiceName: (nativeLanguageVoiceName: string) => setNativeLanguageVoiceNameState && setNativeLanguageVoiceNameState(nativeLanguageVoiceName),
        cards: cardsState,
        setCards: (cards: any[]) => setCardsState && setCardsState(cards),
    };

    return (
        <DataSourceContext.Provider value={contextValue}>
            {children}
        </DataSourceContext.Provider>
    );
};
