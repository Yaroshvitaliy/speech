// Generated by cra-context-generator@1.3.0 on Sun, 24 Jul 2022 09:04:14 GMT.
// Do not edit this file manually unless you disabled its code generation.
import React from 'react';
import ReactDOM from 'react-dom/client';
import { History, Location } from 'history';
import { AppContextProvider, IAppState, AppState, DefaultAppState } from './appContext';
import { createChildren, getHistory, deserializePathname, serializePathname } from './contextBuilderUtils';

/**
 * The App context interface.
 */
export interface IAppContext {
    /**
     * The component to be rendered.
     */
    Component: () => JSX.Element;

    /**
     * Renderes the component.
     *
     * @param {Element | DocumentFragment | null} container The container. Optional parameter.
     */
    render: (container: Element | DocumentFragment | null) => void;

    /**
     * Gets the started.
     */
    getStarted: () => boolean;

    /**
     * Sets the started.
     */
    setStarted: (started: boolean) => void;

    /**
     * Gets the index.
     */
    getIndex: () => number;

    /**
     * Sets the index.
     */
    setIndex: (index: number) => void;
}

interface IComponentProps {
    children: React.ReactNode;
    appState: IAppState;
    started: boolean;
    startedSetEventHandler?: (started: boolean) => void;
    index: number;
    indexSetEventHandler?: (index: number) => void;
    indexUrlParam?: string;
}

/**
 * The App context builder.
 * Helps to build the App context and manage its state.
 */
export class AppContextBuilder {
    private props: IComponentProps = {
        children: undefined,
        appState: DefaultAppState,
        started: DefaultAppState.startedState,
        startedSetEventHandler: undefined,
        index: DefaultAppState.indexState,
        indexSetEventHandler: undefined,
        indexUrlParam: undefined,
    };

    /**
     * Builds the App Context.
     *
     * @returns {IAppContext} The App Context Interface.
     */
    build() {
        const {
            started: initialStarted,
            index: initialIndex,
            indexUrlParam,
        } = this.props;

        const syncStateWithLocation = (appState: IAppState, location: Location) => {
            const {
                setIndexState,
            } = appState;
            const pathname = deserializePathname(location.pathname);
            const index = indexUrlParam && pathname[indexUrlParam] && JSON.parse(decodeURIComponent(pathname[indexUrlParam]));
            index && setIndexState && setIndexState(index);
        };

        const syncLocationWithState = (appState: IAppState, history: History) => {
            const {
                indexState,
            } = appState;
            const pathname = deserializePathname(history.location.pathname);
            indexUrlParam && (pathname[indexUrlParam] = indexState && encodeURIComponent(indexState));
            const serializedPathname = serializePathname(pathname);
            history.replace({ pathname: serializedPathname});
        };

        const Component = () => {
            const history = getHistory();
            const appState = AppState({
                started: initialStarted,
                index: initialIndex,
            });
            const {
                children,
                started,
                index,
                indexUrlParam,
                ...rest
            } = this.props;
            React.useEffect(() => syncStateWithLocation(appState, history.location), []);
            React.useEffect(() => syncLocationWithState(appState, history), [appState, history]);
            this.props.appState = appState;
            return (
                <AppContextProvider {...rest} appState={appState}>
                    {children}
                </AppContextProvider>
            );
        };

        const render = (container: Element | DocumentFragment | null) =>
            ReactDOM
                .createRoot((container || document.createElement('div')) as HTMLElement)
                .render(
                    <React.StrictMode>
                        <Component />
                    </React.StrictMode>
                );

        const getStarted = () => {
            const { startedState } = this.props.appState || {};
            return startedState;
        };

        const setStarted = (started: boolean) => {
            const { setStartedState } = this.props.appState || {};
            setStartedState && setStartedState(started);
        };
        const getIndex = () => {
            const { indexState } = this.props.appState || {};
            return indexState;
        };

        const setIndex = (index: number) => {
            const { setIndexState } = this.props.appState || {};
            setIndexState && setIndexState(index);
        };

        const context: IAppContext = {
            Component,
            render,
            getStarted,
            setStarted,
            getIndex,
            setIndex,
        };

        return context;
    }

    /**
     * Sets the children.
     * All the children within the context will have the same state.
     *
     * @param {(() => JSX.Element) | (Array<() => JSX.Element>)} children The children.
     */
    withChildren(children: (() => JSX.Element) | (Array<() => JSX.Element>)) {
        this.props.children = createChildren(children);
        return this;
    }

    /**
     * Sets the started. Default value: false.
     *
     * @param {boolean} started The started.
     */
    withStarted(started: boolean) {
        this.props.started = started;
        return this;
    }

    /**
     * Sets the started set event handler.
     *
     * @param {(started: boolean) => void} startedSetEventHandler The started set event handler.
     */
    withStartedSetEventHandler(startedSetEventHandler: (started: boolean) => void) {
        this.props.startedSetEventHandler = startedSetEventHandler;
        return this;
    }

    /**
     * Sets the index. Default value: 0.
     *
     * @param {number} index The index.
     */
    withIndex(index: number) {
        this.props.index = index;
        return this;
    }

    /**
     * Sets the index set event handler.
     *
     * @param {(index: number) => void} indexSetEventHandler The index set event handler.
     */
    withIndexSetEventHandler(indexSetEventHandler: (index: number) => void) {
        this.props.indexSetEventHandler = indexSetEventHandler;
        return this;
    }

    /**
     * Sets the index url param to be synchronized with the index state.
     *
     * @param {string} indexUrlParam The index url param.
     */
    withIndexUrlParam(indexUrlParam: string) {
        this.props.indexUrlParam = indexUrlParam;
        return this;
    }
};

export default AppContextBuilder;
