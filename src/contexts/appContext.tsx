// Generated by cra-context-generator@1.3.0 on Sun, 24 Jul 2022 09:04:14 GMT.
// Do not edit this file manually unless you disabled its code generation.
import React from 'react';

/**
 * The App state props interface.
 */
export interface IAppStateProps {
    started: boolean;
    index: number;
}

/**
 * The App state interface.
 */
export interface IAppState {
    startedState: boolean;
    setStartedState?: React.Dispatch<React.SetStateAction<boolean>>;
    indexState: number;
    setIndexState?: React.Dispatch<React.SetStateAction<number>>;
}

/**
 * The App context provider props interface.
 */
export interface IAppContextProviderProps {
    children: React.ReactNode;
    appState: IAppState;
    startedSetEventHandler?: (started: boolean) => void;
    indexSetEventHandler?: (index: number) => void;
}

/**
 * The App context value interface.
 */
export interface IAppContextValue {
    started: boolean;
    setStarted: (started: boolean) => void;
    index: number;
    setIndex: (index: number) => void;
}

export const DefaultStarted = false;
export const DefaultIndex = 0;

/**
 * The default App state.
 */
export const DefaultAppState: IAppState = {
    startedState: DefaultStarted,
    setStartedState: undefined,
    indexState: DefaultIndex,
    setIndexState: undefined,
};

/**
 * The default App context value.
 */
export const DefaultAppContextValue: IAppContextValue = {
    started: DefaultStarted,
    setStarted: (started: boolean) => {},
    index: DefaultIndex,
    setIndex: (index: number) => {},
};

/**
 * The App state.
 */
export const AppState = ({
            started,
            index,
        }: IAppStateProps) => {

    const [ startedState, setStartedState ] = React.useState<boolean>(started || DefaultStarted);
    const [ indexState, setIndexState ] = React.useState<number>(index || DefaultIndex);

    const appState: IAppState = {
        startedState,
        setStartedState,
        indexState,
        setIndexState,
    };

    return appState;
};

/**
 * The App context.
 * The DefaultAppContextValue argument is only used when a component does not have a matching Provider above it in the tree.
 * This can be helpful for testing components.
 */
export const AppContext = React.createContext<IAppContextValue>(DefaultAppContextValue);

/**
 * The App context provider.
 */
export const AppContextProvider = ({
            children,
            appState,
            startedSetEventHandler,
            indexSetEventHandler,
        }: IAppContextProviderProps) => {

    const {
        startedState,
        setStartedState,
        indexState,
        setIndexState,
    } = appState || {};

    React.useEffect(() => {
        startedSetEventHandler && startedSetEventHandler(startedState);
    }, [ startedState, setStartedState, startedSetEventHandler ]);

    React.useEffect(() => {
        indexSetEventHandler && indexSetEventHandler(indexState);
    }, [ indexState, setIndexState, indexSetEventHandler ]);

    const contextValue: IAppContextValue = {
        started: startedState,
        setStarted: (started: boolean) => setStartedState && setStartedState(started),
        index: indexState,
        setIndex: (index: number) => setIndexState && setIndexState(index),
    };

    return (
        <AppContext.Provider value={contextValue}>
            {children}
        </AppContext.Provider>
    );
};
